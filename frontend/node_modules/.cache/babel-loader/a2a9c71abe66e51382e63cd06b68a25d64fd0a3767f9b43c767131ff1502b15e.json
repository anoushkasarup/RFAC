{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anous\\\\OneDrive\\\\Desktop\\\\DISC\\\\RFAC\\\\frontend\\\\src\\\\components\\\\piechart.js\";\nimport './piechart.css';\nimport React from 'react';\nimport { PieChart } from 'react-minimal-pie-chart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Pie() {\n  // Transform input code and getting random color from ChatGPT\n  function transformInput(input) {\n    var output = [];\n    for (var i = 0; i < input.length; i++) {\n      var dictionary = input[i];\n      var key = Object.keys(dictionary)[0];\n      var value = dictionary[key];\n      var color = getRandomColor();\n      var newDict = {\n        title: key,\n        value: value,\n        color: color\n      };\n      output.push(newDict);\n    }\n    return output;\n  }\n  function getRandomColor() {\n    var letters = '0123456789ABCDEF';\n    var color = '#';\n    for (var i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  // Test Input\n  const inputData = [{\n    'One': 5\n  }, {\n    'Two': 15\n  }, {\n    'Three': 20\n  }, {\n    'Four': 12\n  }];\n\n  // Calculate total value\n  const totalValue = inputData.reduce((total, entry) => total + Object.values(entry)[0], 0);\n\n  // Transform data\n  const data = transformInput(inputData);\n\n  // Note: Piechart will only label values on the pie chart that are more than 10% of the total\n  //       This is to avoid a thin scection with overflowing words\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(PieChart, {\n      className: \"piechart\",\n      data: data,\n      radius: 50,\n      label: _ref => {\n        let {\n          dataEntry\n        } = _ref;\n        return dataEntry.value > 0.1 * totalValue ? `${dataEntry.title}: ${dataEntry.value}` : '';\n      },\n      labelPosition: 60,\n      labelStyle: {\n        fontSize: '4px',\n        fontFamily: 'sans-serif',\n        fill: '#FFFFFF'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pie-legend\",\n      children: data.map((dataEntry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            backgroundColor: dataEntry.color\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: dataEntry.color\n          },\n          children: `${dataEntry.title}: ${dataEntry.value}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_c = Pie;\nexport default Pie;\nvar _c;\n$RefreshReg$(_c, \"Pie\");","map":{"version":3,"names":["React","PieChart","jsxDEV","_jsxDEV","Pie","transformInput","input","output","i","length","dictionary","key","Object","keys","value","color","getRandomColor","newDict","title","push","letters","Math","floor","random","inputData","totalValue","reduce","total","entry","values","data","children","className","radius","label","_ref","dataEntry","labelPosition","labelStyle","fontSize","fontFamily","fill","fileName","_jsxFileName","lineNumber","columnNumber","map","index","style","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/anous/OneDrive/Desktop/DISC/RFAC/frontend/src/components/piechart.js"],"sourcesContent":["import './piechart.css';\r\nimport React from 'react';\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\n\r\nfunction Pie() {\r\n  // Transform input code and getting random color from ChatGPT\r\n  function transformInput(input) {\r\n    var output = [];\r\n    for (var i = 0; i < input.length; i++) {\r\n      var dictionary = input[i];\r\n      var key = Object.keys(dictionary)[0];\r\n      var value = dictionary[key];\r\n      var color = getRandomColor();\r\n      var newDict = { title: key, value: value, color: color };\r\n      output.push(newDict);\r\n    }\r\n    return output;\r\n  }\r\n\r\n  function getRandomColor() {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n  // Test Input\r\n  const inputData = [\r\n    { 'One': 5 },\r\n    { 'Two': 15 },\r\n    { 'Three': 20 },\r\n    { 'Four': 12 }\r\n  ];\r\n\r\n  // Calculate total value\r\n  const totalValue = inputData.reduce((total, entry) => total + Object.values(entry)[0], 0);\r\n\r\n  // Transform data\r\n  const data = transformInput(inputData);\r\n\r\n  // Note: Piechart will only label values on the pie chart that are more than 10% of the total\r\n  //       This is to avoid a thin scection with overflowing words\r\n  return (\r\n    <div>\r\n      <PieChart\r\n        className=\"piechart\"\r\n        data={data}\r\n        radius={50}\r\n        label={({ dataEntry }) =>\r\n          dataEntry.value > 0.1 * totalValue ? `${dataEntry.title}: ${dataEntry.value}` : ''\r\n        }\r\n        labelPosition={60}\r\n        labelStyle={{\r\n          fontSize: '4px',\r\n          fontFamily: 'sans-serif',\r\n          fill: '#FFFFFF',\r\n        }}\r\n      />\r\n      <div className=\"pie-legend\">\r\n        {data.map((dataEntry, index) => (\r\n          <div key={index}>\r\n            <span\r\n              style={{ backgroundColor: dataEntry.color }}\r\n            ></span>\r\n            <span\r\n              style={{ color: dataEntry.color }}\r\n            >{`${dataEntry.title}: ${dataEntry.value}`}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pie;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}